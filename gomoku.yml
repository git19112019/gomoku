gomoku_game:
  description: "Full Gomoku game design with pseudocode, implementation, flowchart, and JSON state."

  # üß† Pseudocode Logic
  pseudocode:
    description: "Step-by-step logic including AI, save/load, and undo."
    steps:
      - Initialize game:
          actions:
            - Create a 15x15 empty board
            - Set current player to 'X'
            - Ask for opponent type (Human or AI)
            - Set game_over to False
            - Initialize move_history list
      - Main game loop:
          actions:
            - Display the board
            - Prompt player (or AI) for action:
                - Move
                - Undo
                - Save
                - Load
            - If move:
                - Validate
                - If valid:
                    - Apply move
                    - Add to move_history
                    - Check win
                    - Check draw
                    - If not over ‚Üí switch player
                - If invalid: retry
            - If undo:
                - Revert last move
                - Switch player back
            - If save:
                - Save state to JSON file
            - If load:
                - Load state from JSON file
      - End game:
          actions:
            - Announce winner or draw
            - Offer restart or exit

  # üêç Python Code Implementation
  python_code:
    description: "Python implementation of Gomoku with save/load, AI, and undo features."
    snippet: |
      import json
      import random

      class Gomoku:
          SIZE = 15

          def __init__(self, vs_ai=False):
              self.board = [[' ' for _ in range(self.SIZE)] for _ in range(self.SIZE)]
              self.current_player = 'X'
              self.game_over = False
              self.winner = None
              self.vs_ai = vs_ai
              self.move_history = []

          def display_board(self):
              print("  " + " ".join([f"{i:2}" for i in range(self.SIZE)]))
              for i, row in enumerate(self.board):
                  print(f"{i:2} " + " ".join(row))

          def is_valid_move(self, x, y):
              return 0 <= x < self.SIZE and 0 <= y < self.SIZE and self.board[x][y] == ' '

          def make_move(self, x, y):
              if self.is_valid_move(x, y):
                  self.board[x][y] = self.current_player
                  self.move_history.append((x, y))
                  return True
              return False

          def undo_move(self):
              if self.move_history:
                  x, y = self.move_history.pop()
                  self.board[x][y] = ' '
                  self.switch_player()
                  print("Last move undone.")
              else:
                  print("No moves to undo.")

          def switch_player(self):
              self.current_player = 'O' if self.current_player == 'X' else 'X'

          def check_win(self):
              directions = [(1,0), (0,1), (1,1), (1,-1)]
              for x in range(self.SIZE):
                  for y in range(self.SIZE):
                      if self.board[x][y] == self.current_player:
                          for dx, dy in directions:
                              if self.count_stones(x, y, dx, dy) >= 5:
                                  self.winner = self.current_player
                                  self.game_over = True
                                  return True
              return False

          def count_stones(self, x, y, dx, dy):
              count = 0
              for i in range(5):
                  nx, ny = x + dx*i, y + dy*i
                  if 0 <= nx < self.SIZE and 0 <= ny < self.SIZE and self.board[nx][ny] == self.current_player:
                      count += 1
                  else:
                      break
              return count

          def is_draw(self):
              for row in self.board:
                  if ' ' in row:
                      return False
              self.game_over = True
              return True

          def save_game(self, filename="gomoku_save.json"):
              state = {
                  "board": self.board,
                  "current_player": self.current_player,
                  "game_over": self.game_over,
                  "winner": self.winner,
                  "move_history": self.move_history,
                  "vs_ai": self.vs_ai
              }
              with open(filename, 'w') as f:
                  json.dump(state, f)
              print("Game saved.")

          def load_game(self, filename="gomoku_save.json"):
              with open(filename, 'r') as f:
                  state = json.load(f)
              self.board = state["board"]
              self.current_player = state["current_player"]
              self.game_over = state["game_over"]
              self.winner = state["winner"]
              self.move_history = state["move_history"]
              self.vs_ai = state["vs_ai"]
              print("Game loaded.")

          def ai_move(self):
              empty_cells = [(x, y) for x in range(self.SIZE) for y in range(self.SIZE) if self.board[x][y] == ' ']
              return random.choice(empty_cells)

          def play(self):
              while not self.game_over:
                  self.display_board()
                  print(f"Player {self.current_player}'s turn.")
                  if self.vs_ai and self.current_player == 'O':
                      x, y = self.ai_move()
                      print(f"AI chooses: {x}, {y}")
                  else:
                      action = input("Enter move x y, or 'undo', 'save', 'load': ").strip().lower()
                      if action == 'undo':
                          self.undo_move()
                          continue
                      elif action == 'save':
                          self.save_game()
                          continue
                      elif action == 'load':
                          self.load_game()
                          continue
                      try:
                          x, y = map(int, action.split())
                      except:
                          print("Invalid input.")
                          continue

                  if self.make_move(x, y):
                      if self.check_win():
                          self.display_board()
                          print(f"Player {self.current_player} wins!")
                          break
                      elif self.is_draw():
                          self.display_board()
                          print("It's a draw!")
                          break
                      self.switch_player()
                  else:
                      print("Invalid move.")

      if __name__ == "__main__":
          mode = input("Play vs AI? (y/n): ").lower().startswith('y')
          game = Gomoku(vs_ai=mode)
          game.play()

  # üîÅ Flowchart (Mermaid Syntax)
  flowchart:
    description: "Game flow including AI, undo, and save/load logic."
    diagram: |
      graph TD
        Start[Start Game] --> Init[Initialize Game]
        Init --> Opponent[Choose Opponent Type]
        Opponent --> Loop[Main Game Loop]
        Loop --> Board[Display Board]
        Board --> Action{Choose Action}
        Action -- Move --> GetMove[Get Move Input]
        Action -- Undo --> UndoMove[Undo Last Move] --> Loop
        Action -- Save --> SaveGame[Save Game to File] --> Loop
        Action -- Load --> LoadGame[Load Game from File] --> Loop
        GetMove --> Validate[Validate Move]
        Validate -- Invalid --> Loop
        Validate -- Valid --> ApplyMove[Apply Move]
        ApplyMove --> CheckWin[Check Win]
        CheckWin -- Yes --> EndWin[Declare Winner]
        CheckWin -- No --> CheckDraw[Check Draw]
        CheckDraw -- Yes --> EndDraw[Declare Draw]
        CheckDraw -- No --> Switch[Switch Player] --> Loop
        EndWin --> End[Game Over]
        EndDraw --> End

  # üßæ Example JSON Game State
  json_example:
    description: "Example of serialized game state after several moves."
    state: |
      {
        "board": [
          [" ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " "],
          [" ", "X", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " "],
          [" ", "O", "X", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", "O", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", "X", " ", " ", " ", " ", " ", " ", " ", " ", " ", " "],
          [" ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " "]
        ],
        "current_player": "X",
        "game_over": false,
        "winner": null,
        "move_history": [[1,1], [2,1], [2,2], [3,3], [4,4]],
        "vs_ai": true
      }
